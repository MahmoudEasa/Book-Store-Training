/* 
    background-repeat: repeat; (لتكرار الصورة)
    no-repeat (لعدم تكرار الصورة)
    repeat-x (تكرار الصورة أفقي)
    repeat-y (تكرار الصورة عمودي)

    background-attachment: fixed; لما اعمل اسكرول الصورة لا تختفي

    background-position: center; (left top, left center, left bottom,
    and right top, center, bottom) (20px or 20% from left, 20px or 20% from top) 

    background-size: cover; الصورة تغطي المحتوى وممكن ينقطع منها
    background-size: contain; الصورة تغطي المحتوى وتفضل ظاهرة بالكامل
    background-size: 100% 100%; الأختيار الأمثل لاكن الصورة بتتمط

    display: none; 
    إخفاء العنصر ويذهب العنصر اللي تحته مكانه

    visibility: hidden;
    إخفاء العنصر ويفضل حاجز مكانه تستعمل لو عايز اعمل انيميشن مثلاً

    Grouping => .one, .two, .three, .four{
    أختيار أكثر من عنصر او كلاس ويفصل بينهم بفاصلة }

    Nesting => div p .one { اختيار عنصر داخل عنصر بالتحديد }

    width => min-width, max-width
    width: fit-content; يفضل العنصر بلوك والعرض يكون على أد المحتوى
    height => min-height, max-height

    border-radius: 10px; يعمل المربع دائري من الأجناب

    overflow: auto; المحتوى اللي خارج عن العنصر يبقى داخل العنصر
    overflow-x And y: auto; المحتوى اللي خارج عن العنصر يبقى داخل العنصر
    
    syntax => text-shadow: H-Shadow V-Shadow Blur color{ 2px 2px 2px red }

    Alignment =>
    text-align: center;
    direction: ltr, rtl;
    
    vertical-align: top, bottom, middle;
    محازاة النص لو في بينهم صورة 
    top في اول الصورة
    middle او في نصف الصورة 
    bottom او في اخر الصورة

    text-decoration =>
    خط تحت الكلام او فوق الكلام أو في نصف الكلام يستخدم في إزالة الخط من تحت اللينك
    
    text-transform =>
    يخلي اول حرف كابيتال او كل الحروف كابيتال أو كله سمول

    letter-spacing => المسافة بين الحروف بالموجب أو بالسالب
    text-indent => مسافة قبل الكلام
    line-height => المسافة بين السطور
    word-spacing => المسافة بين الكلمات
    white-space => nowrap; يخلي الكلام مينزلش للسطر اللي بعده
    word-break => يخلي الكلام لا يخرج بره العنصر ويعمل بريك يستخدم للينك اكثر
    text-overflow: ellipsis => يعرف المستخدم ان فيه كلام خارج العنصر ومختفي

    inherit => يورث الخواص للعنصر من الأب (مهمة جداً)

    font-size =>
    Default Font size For Web Page Is 16px
    ** px
    ** em => Time 1em = 1time بياخد من الأب الموروث
    1em = نفس حجم الكتابة من الأب الموروث
    2em = نفس حجم الكتابة من الأب الموروث مرتين
    
    ** rem => Root Time بياخد من اتش تي ام ال اللي في بداية الصفحة
    ** percentage => (100%) بياخد النسبة المؤوية من الأب
    ** vw => View Port Width بتاخد 1 في المية من مساحة الصفحة

    font style => italic, oblique نفس الخاصية لخط مختلف
    font variant =>
    small-caps, يحول الكلام كابيتال بس اصغر من حجم الخط الموجود
    
    font weight => bold or normal
    
    Mouse Cursor => cursor: pointer, move, grab..ets; التحكم في شكل الماوس

    Float => ملهمش لازمة بديل لل فليكس بوكس
    Clear => ملهمش لازمة يفصل الفلوووت

    width: calc(90% / 5); بدل الآلة الحاسبة

    Opacity: 0.1; => شفافية للمحتوى كامل (التيكست والباك جروند) 
        يستخدم لما يكون في اليرت وعايز 
        اخفي المحتوى اللي في الخلف شوية

    Position =>
    **Position: relative; يتحرك بناءً على نفسه
    **Position: absolute;
        كأنه مش موجود في الصفحة بيتحرك بناءً على الأب اللي هو فيه
        لو اديته الأبعاد مش هايتحرك مع العنصر الآخر
        لو مدتلوش الأبعاد هايتحرك مع العنصر الآخر
        Position: relative; علشان يتحرك داخل العنصر الأب لازم العنصر الأب ياخد
    **position: fixed; بيتحرك بناء على الصفحة بغض النضر هو فين
        وكمان بينزل معاك طول ما انت بتعمل اسكرول
        يستخدم مثلاً للزرار في اخر الصفحه بيطلعك لأول الصفحة
    **position: sticky; لما الأسكرول يوصله يفضل ظاهر معاك طول ما بتعمل اسكرول

    Z-Index => ترتيب العناصر فوق بعضها الرقم الأكبر هو اللي فوق
        position لا يشتغل بدون الـ 

    list-style-type: none; (ul) بيشيل العلامة من القائمة الغير مرتبة

    list-style-position: inside; (li) بيخلي العلامة داخل ال
    علشان لو عايز اعمل خلفية والعلامة تيجي داخل الخلفية
    
    list-style-image: url(""); (li) إضافة صورة لل

    list-style: type position url(); اختصار للكل

    reset ul =>
    list-style: none;
    padding-left: 0;
    margin: 0;

    table =>
    display: table;

    Pseudo Classes => (:) كلاس مزيف او مستعار
    :hover لما بتروح بالماوس على العنصر دا اسمه هوفر
    :checked + label لما أعلم على المربع يخلي لون الكلام اللي جنبه يتغير 
    :visited يغير لون اللينك لما تزوره
    :empty اي عنصر في الملف فاضي
    :focus لما اضغط على فورمة علشان اكتب جواها
    
    Pseudo Elements => (::) عنصر مزيف او مستعار
    ::first-letter أول حرف من الجملة ينسقه
    ::first-line أول سطر من الجملة ينسقه
    ::selection لما اعمل سليكت
    
    Pseudo Elements => (::) أهم العناصر في
    ::before 
    ::after 
    content: ""; لازم نحطها داخل العنصرين علشان يشتغلو
    transparent إخفاء لون من الألوان
    
    Pseudo Elements => (::)
    Content 
    Trainings 
    counter-increment: members-counter; خاصية العداد يعد العناصر (أسميه زي ما انا عايز)
    content: counter(members-counter); أخذتها من الأب
    content: attr(data-text); اتربيوت من ال اتش تي ام ال
    
    Vendeor Prefixes =>
        لما بيكون في ميزة جديدة بنحتاج نعرف هل كل المتصفحات بتدعمها ولا لا
        Can I use هذا موقع بعرف منه هل المتصفحات بتدعم الميزه دي ولا لا
    
    Border Radius => ممكن اعمل قيمة واحده من كل الاتجاهات
        وممكن اعمل قيمة لأتجاه واحد فقط
    border-radius: 50%; لو عملت كل الأتجاهات تبقى دائرة
    border-top-left-radius: 10px 20px; والاتجاه الواحد ليه قيمتين
    border-bottom-right-radius: ;
    
    Box Shadows => H-Shadow | V-Shadow | Blur | Spread | Color | Inset Or Outset
        ممكن اعمل أكثر من شادو بنفس القيم وبينهم فاصلة

    The Box Model And Box Sizing => 
    box-sizing: content-box; By Defoult بيحسب البادينج والبوردر
    box-sizing: border-box; علشان ميحسبش البادينج والبوردر
        علشان اعمل بادينج والبوردر براحتي والعنصرين يكونو جنب بعض
    prefix = 
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;

    Transition => 
    transition: width 3s, height 1s, all 0.5s 2s linear;
        -webkit-transition: width 3s, height 1s, all 0.5s 2s linear;
        -moz-transition: width 3s, height 1s, all 0.5s 2s linear;
        -ms-transition: width 3s, height 1s, all 0.5s 2s linear;
        -o-transition: width 3s, height 1s, all 0.5s 2s linear;
    transition-duration: 0.5s; التحكم في مدة الأنتقال
    transition-delay: 2s; ينتظر ثانيتين وبعدين يفعل المطلوب
    transition-property: width, height;
        الخاصية اللي بتطبق عليها الكنترولينج
        الخاص بالإنتقال من حالة لحالة
        (بختار خاصية أو أكثر أطبق عليها اللي فات وبينهم فاصلة)
    transition-timing-function: ease; بيبدء بطيء ويسرع وينتهي بطيء
    transition-timing-function: linear; من أول ما يبدأ لحد ما ينتهي بنفس السرعة
    transition-timing-function: ease-in; بيبدء بطيء ويكمل عادي
    transition-timing-function: ease-out; بيمشي عادي وينتهي بطيء
    transition-timing-function: ease-in-out; بيبدء بطيء وفي النصف يمشي عادي وينتهي بطيء
    
    The !Important Declaration => 
    background-color: #EEE !important; تصريح ان الكود دا مهم
    Override لو بعدل على ملف اخر ولا يوجد عندي اكسيس على الكود

    The Margin Collapse => 
    
    CSS Variables => 
    :root { طريقة كتابة المتغير
        --mainColor: blue;
    }
    var(Variable Name, Fallback Value) طريقة الاستخدام
    Fallback Value يضاف علشان لو في خطأ في قيمة المتغير يستخدمه
    background-color: var(--mainColor, black);

    Flex Box - Parent, Direction, Wrap, Flow =>
    --For Parent
    --- display: flex; To Start Flexible Box
    --- flex-direction: row; Defoutl Value
    --- flex-direction: row-reverse;
    --- flex-direction: column, column-reverse;
    --- flex-wrap: nowrap; Defoult Value أي عنصر زيادة لا ينزل تحت
    --- flex-wrap: wrap; أي عنصر زيادة ينزل تحت
    --- flex-wrap: wrap-reverse; أي عنصر زيادة يطلع لفوق
    --- flex-flow: row wrap; [Flex-Direction] + [Flex-wrap]
    
    Flex Box - Parent, Justity Content => row عرضياً
    justity-content: flex-start; Defoult Value
    justity-content: flex-end;
    justity-content: center;
    justify-content: space-between;
    justify-content: space-around;
    justify-content: space-evenly; بيجمع بين الأثنين
    
    Flex Box - Parent, Align Items => row طولياً
    align-items: stretch; Defoult Value
    
    Flex Box - Parent, align Content => column طولياً
    align-content: stretch; Defoult Value
    
    Flex Box - Child, Grow, Shrink, Order => 
    flex-grow: 0; Defoult Value العنصر ينمو
    flex-grow: 1; العناصر تنمو أد بعضها
    flex-grow: 3; عنصر معين ليه الأولوية للنمو
    عنصر معين ينمو اكثر من باقي العناصر
    ما دام في مساحه متاحه في الكونتينر
    flex-shrink: 1; Defouolt Value العنصر ينكمش
    flex-shrink: 3; عنصر معين ليه الأولوية للإنكماش
    عنصر معين ينكمش أكثر من باقي العناصر
    لحد ما يبقو كلهم أد بعض ويقف عمل الأنكماش
    order: 0; Defoult Value تتحكم في عنصر واحد
    
    Flex Box - Child, Flex-Basis, Flex Shorthand => 
    flex-basis: auto; Defoult Value Use In Flex Items Only
    flex-basis: 300px; Defoult بدل العرض والطول
    بتمشي حسب الأتجاه عمودي أو طولي
    بيستخدم في العناصر الأبن فقط اي عنصر خارجي لا يعمل
    max-width بيحترم ال
    flex: [Flex Grow] [Flex Shrink] [Flex Basis]; (0 1 auto); Defoult All
    display: inline-flex; لو في عنصر تحته وعايز يجي جنبه
    display: inline-block; العنصر اللي تحت فليكس يكون
    
    Flex Box - Child, Align Self, Games, Task => 
    align-self: auto; Defoult Value يحدد خواص لعنصر معين
    
    Finish Flex Froggy Game =>
    
    Filters => لازم أتأكد أنه مدعوم على المتصفحات
    filter: grayscale(100%); أبيض وأسود
    filter: blur(4px); ضبابية غير واضحة
    filter: invert(100%); بيخلي الصورة معكوسة يعني من الظهر بنسبة من 0 إلى 100
    
    Gradients => 
    background-image: linear-gradient(Direction || Angle, Color Stop 1, Color Stop 2, ......);
    Direction => to right, to left, to top, to bottum
    Angle => 0deg(top) 90deg(right) 180deg(bottum) 270deg(left)
    background-image: linear-gradient(90deg, red 50% or 50px, green);
    ممكن اعمل نسبة مساحة للون داخل الجريديانت
    (red 20%, green 20%, green 40%,
    blue 40%, blue 60%,
    yellow 60%, yellow 80%, black 80%)
    
    Pointer Events And Caret Color => 
    caret-color: red; يغير لون علامة الكتابة
    caret-color: transparent; يخفي علامة الكتابة
    Pointer لما بروح بالموس على الحاجة
    Events لما اعمل كليك مثلاً أو هوفر أو أي حاجه
    pointer-events: none; يخلي العنصر غير تفاعلي نهائي
    
    Grid Parent - Template Columns => 
    display: grid; inline-grid لو في عنصر جنبه
    grid-template-columns: 25% 25% 25% 25%; [px, %, auto, 1fr (Frection), repeat(10, auto), Mix All]
    1fr 2fr بيقسمو المساحه اللي موجوده على ثلاثة أجزاء واحد جزء والتاني جزئين
    auto الأوتو خجول بياخد مساحة على اد اللي جواه
    1fr 1fr بياخدو المساحه الباقية بيقسموها على بعض
    grid-template-columns: repeat(4, 1fr);
    
    Grid Parent - Template Rows And Gap => 
    grid-template-rows: repeat(3, 1fr);
    row-gap: 10px;
    column-gap: 10px;
    grid-template: repeat(3, 1fr)/ repeat(3, 1fr);
    gap: 10px 10px;
    
    Grid Parent - Justify And Align Content => 
    justify-content: نفس إعدادات الفليكس
    align-content: نفس إعدادات الفليكس
    
    Grid Parent - Full Layout With Grid template Areas => 
    
    Grid Child - Column And Row => 
    grid-column: 1 / 5; يبدأ من العمود 1 ويدمج 4 أعمدة
    grid-column: span 4; يبدأ من العمود 1 ويدمج 4 أعمدة
    grid-column: 2 / span 3; يبدء من العمود 2 ويدمج 3 أعمدة
    grid-row: نفس الإعدادات
    
    Grid Child - Area And Trainings => 
    grid-area: [Grid Row Start] [Grid Column Start] [Grid Row End] [Grid Column End];
    grid-area: 2 / 2 / 5 / 6;
    
    Grid Min, Max And Auto-Fill => 
    grid-template-columns: minmax(200px, 400px) repeat(4, 1fr); 
    grid-template-columns: repeat(auto-fill, 200px);
    يملأ المساحة على حسب المساحة الموجودة بأعمدة 200 بكسيل
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    يملأ المساحة على حسب المساحة الموجودة بأعمدة من 200 بكسيل ولو في مساحه تاني يملاها
    auto-fit أبحث عنها وأتعلمها
    
    Finish CSS Grid Garden Game => 
    
    2D Transform Scale => يكبر العنصر ويصغره
    transform: scalex();
    transform: scaley();
    transform: scale(1, 2 || -1, -2); لما اعملها بالسالب تقلب الكلمة داخل العنصر
    -webkit-transform: scale(1, 2);
    -moz-transform: scale(1, 2);
    -ms-transform: scale(1, 2);
    -o-transform: scale(1, 2);
    
    2D Transform Rotate => يلف العنصر يمين وشمال
    deg => Degrees
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    -o-transform: rotate(45deg);
    
    2D Transform Translate => يحرك العنصر فوق وتحت
    transform: translate(10px, -10px);
    -webkit-transform: translate(10px, -10px);
    -moz-transform: translate(10px, -10px);
    -ms-transform: translate(10px, -10px);
    -o-transform: translate(10px, -10px);
    
    2D Transform Skew => تعمل أنحراف للعنصر
    transform: skew(10deg);
    -webkit-transform: skew(10deg);
    -moz-transform: skew(10deg);
    -ms-transform: skew(10deg);
    -o-transform: skew(10deg);
    
    2D Transform Matrix => بياخد كل القيم اللي فاتت بدون فواصل
    Syntax => matrix( translatex() translatey() scalex() skewy() skewx() scaley() )
    transform: translatex() translatey() scalex() skewy() skewx() scaley(); بنفس الترتيب
    transform: matrix(1, 0, 0, 1, 0, 0);
    -webkit-transform: matrix(1, 0, 0, 1, 0, 0);
    -moz-transform: matrix(1, 0, 0, 1, 0, 0);
    -ms-transform: matrix(1, 0, 0, 1, 0, 0);
    -o-transform: matrix(1, 0, 0, 1, 0, 0);
    
    Transform - Origin =>
    بيحدد نقطة الارتكاز اللي العنصر بيتحرك منها
    زي دوران العنصر وتكبير وتصغير العنصر
    transform-origin: 50% 50% 0; Defoult Value
    بتبقى نقطة الارتكاز في نصف العنصر
    [px, %, Or left right top bottom]
    
    3D Transform Rotate + Trainings => 
    transform: rotate3d(1, 1, 1, 10deg); x, y, z, deg
    -webkit-transform: rotate3d(1, 1, 1, 10deg);
    -moz-transform: rotate3d(1, 1, 1, 10deg);
    -ms-transform: rotate3d(1, 1, 1, 10deg);
    -o-transform: rotate3d(1, 1, 1, 10deg);
    
    3D Transform - Translate, perspective, perspective Origin => 
    perspective: 300px; بنحطها على العنصر الأب علشان نقوله
    المسافة اللي بيني وبين العنصر كل ما كان البيكسل اصغر
    كل ما كان المسافة اللي بينك وبين العنصر اصغر
    كل ما كان البيكسل أكبر
    كل ما كان المسافة اللي بينك وبين العنصر بعيدة
    transform: translate3d(0, 0, 100px); بنحطها على الأبن بعد ما نحط عنصر الأب
    -webkit-transform: translate3d(0, 0, 100px);
    -moz-transform: translate3d(0, 0, 100px);
    -ms-transform: translate3d(0, 0, 100px);
    -o-transform: translate3d(0, 0, 100px);
    perspective-origin: center center; بنحطها على العنصر الأب
    علشان نحدد احنا بنشوف العنصر من أي أتجاه
    أو أحدد الأتجاه اللي المنظور بيبدأ منه
    
    3D Transform - Backface Visibility And Flip Product => 
    backface-visibility: hidden; Defoult Value
    أي عنصر بيلف بتتحكم هل اليوزر يشوف العنصر دا ولا لا
    -webkit-backface-visibility: hidden;
    transform-style: preserve-3d;
    بنضيفه علشان يحفظ مكان العنصر في الثري دي
    
    Animation - KeyFrames, Name, Duration => [from - to] , [0% - 100%]
    animation-name: spin, change-color2; أسم الكي فريم
    animation-duration: 1s; وقت الأنيميشن
    @keyframes change-color {
        from {
            background-color: red;
        }
        to {
            background-color: blue;
        }
    }
    Or
    @keyframes change-color {
        0% {
            background-color: #eee;
        }
        50% {
            background-color: red;
        }
        100% {
            background-color: #eee;
        }
    }
    
    Animation - Iteration Count, Timing Function, Spinner Loading => 
    animation-iteration-count: infinite; علشان يفضل شغال الأنميشن بدون توقف
    animation-timing-function: linear; ميبقاش فيه تقطيع في الحركة

    Animation - Direction, Delay, Fill Mode, Play State => 
    animation-direction: reverse; بيمشي بالعكس
    animation-direction: alternate; بيمشي للأمام وبعدين للخلف
    animation-direction: alternate-reverse; بيمشي للخلف وبعدين للأمام
    animation-delay: 1s; بيتأخر شوية قبل ما يبدأ الأنيميشن 
    animation-fill-mode: forwards; بيخلص أنيميشن وبياخد اخر كي فريم بدل ما يرجع لأصله
    animation-fill-mode: backwards;
    animation-fill-mode: both;
    animation-play-state: paused; لما أروح عليه بالماوس الأنميشن يوقف
    animation: change-color 3s linear infinite reverse; أختصار الأنميشن
    
    Animation - Up And Down Animation Trainings => 
    
    Selectors Reference Part 1 => 
    -- * جميع العناصر اللي في الصفحة 
    -- Element => [p, div, h2]
    -- Element OtherElement => [div p]
    -- .class-name
    -- #id-name
    -- .parent .child
    -- .class-one.class-two => بدون مسافات (بترجت عنصر فيه الأثنين كلاس مع بعض)
    -- .clas-name div
    -- .clas-name div, .class-name p
    -- element.class-name = p.class-name => class-name for p only
    -- .class-name > .child => Direct Child يعني كلاس أو أي عنصر تاني يكون ابن مباشر 
        ميكنش كلاس جوه كلاس أو أي عنصر تاني جوه أي عنصر تاني

    Selectors Reference Part 2 => 
    -- Element + Other Element => [div + p] بنختار العنصر بي
        ولازم العنصر بي يكون قبله ديف
    -- Element ~ Other Elements => [p ~ div] بنزود حرف اس علشان الجمع
        بنختار كل الديفات الأبن لل بي
    -- [Attribute] مثلا => [href] [target] [title] جميع العناصر اللي ليها
    -- Element[Attribute] مثلا => div[title] يعني جميع الديف اللي ليها تايتل
    -- [Attribute="Value"]
    -- Element[Attribute="Value"] => input[type="submit"]
    -- [Attribute~="Div"] => Contains A Word يكون فيه كلمه معينة ومنفصلة
            يعني اتربيوت يكون في الفاليو بتاعته كلمة ديف منفصلة
    -- [Attribute*="Div"] => Contains A String
        يكون فيه جزء من كلمه معينة ومش شرط تكون منفصلة
        يعني اتربيوت يكون في الفاليو بتاعته كلمة ديف منفصلة أو لا
    -- [Attribute^="Div"] => Start With A String
        يعني اتربيوت يكون بيبدأ بفاليو معينة
        يعني بيبدأ بديف وبيكمل عادي بأي حاجه

    Selectors Reference Part 3 => 
    -- :first-child => [p:first-child] 
        الأبن الأول للأب بتاعه
        يعني يكون براجراف ويكون أول أبن للأب 
        والأب يكون ديف او بدي أو أي عنصر
    -- :last-child => [p:last-child]
        آخر أبن للأب بتاعه
    -- :first-of-type => [p:first-of-type]
        يعني الأول من نوعة داخل الأب بتاعه
    -- :last-of-type => [p:last-of-type]
        يعني الأخير من نوعة داخل الأب بتاعه
    -- :only-child => [p:only-child] يعني مش معاه أبناء آخرين
    -- :only-of-type => [p:only-of-type] الوحيد من نوعه
        يعني يكون معاه عناصر اخرين عادي بس ميكنش في عنصر زيه

    Selectors Reference Part 4 => 
    -- :not(Selectors) => [p:not(:first-child)] يعني العكس
        يعني كله ما عدا اول عنصر
    -- :nth-child(n) => بعد كل العناصر مش عنصر معين
    -- :nth-child(n) => [p:nth-child(2)] العنصر التاني في الأب بتاعه
        nth = 1st or 2nd or 3rd or 5th يعني اليوم الأول والثاني والثالث
    -- :nth-child(n) => [p:nth-child(even)] يعني الأرقام الزوجية
    -- :nth-child(n) => [p:nth-child(odd)] يعني الأرقام الفردية
    -- :nth-last-child(n) => يعني بنعد من الآخر
    -- :nth-of-type(n) => بعد عنصر معين
    -- :nth-of-type(n) => [div:nth-of-type(2)] يعني الديف الثاني
        مش بعد كل العناصر بعد من أول الديف
    -- :nth-last-of-type(n) => [div:nth-last-of-type(2)] يعني الديف الثاني من الآخر
    
    Selectors Reference Part 5 => 
    -- :root
    -- :checked
        input[type="checkbox"]:checked + label {
            يعني الليبول اللي بعد الأنبوت اللي معموله تشيك
        }
    -- :empty => div:empty
    -- :disabled => input:disabled
    -- :required => input:required + span
    -- :focus => input:focus
    -- ::selection => div::selection بيغير لون خلفية التحديد
    -- ::placeholder => div::placeholder يغير لون الكلام اللي جوه الحقول

    Media Queries And Responsive - Intro =>
    @media (min-width: 200px) and (max-width: 500px) {
        * {
            font-size: 1.5em;
            color: red;
        }
    }
    
    Media Queries And Responsive - Standards => 
    print.css ملف جديد
    css-tricks موقع للمقاسات الأستندر للشاشات
    
    (Mobile)
    @media (max-width: 767px) {

    }
    (Small Screens)
    @media (min-width: 768px) and (max-width: 991px) { لشاشة واحدة فقط

    }
    (Medium Screens)
    @media (min-width: 992px) {

    }
    (Large Screens)
    @media (min-width: 1200px) {

    }
    (x Large Screens)
    @media (min-width: 1400px) {

    }

    Media Queries And Responsive - Practice => 
    Mobile First => مصطلح معناه اصمم الموقع على الموبايل أولاً
    
    Create Your Framework => 
    
    Global Values => قيم عامة موجودة في جميع خواص السي أس أس
    border: inherit; يورث الخواص من العنصر الأب
    border: initial; Defoult Value مثلا عناصر البلوك هي في الأساس أنلاين
        (User agent) واليوزرإيجنت بيديها خاصية البلوك
    border: unset; use the inherit work لو الخاصية بتتورث
        use the initial work لو الخاصية لا تتورث
    all: unset; يعني جميع الخواص
    border: revert; (User agent) بترجع العنصر للتنسيقات بتاع اليوزرإيجنت

    The End And How To Master HTML + CSS => 

    إزاي أحسب من البيكسل لل إي إم والعكس
    px / 16 = em
    em * 16 = px

    */

.load {
    display: flex;
    justify-content: center;
    align-items: center;
}
.load div {
    width: 20px;
    height: 20px;
    background-color: orchid;
    margin: 0 5px;
    animation-name: up-and-down;
    animation-duration: 0.9s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    border-radius: 50%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    -ms-border-radius: 50%;
    -o-border-radius: 50%;
}
    .load .two-load {
    animation-delay: 0.3s;
    }
    .load .three-load {
    animation-delay: 0.6s;
    }


    @keyframes up-and-down {
        to {
            opacity: 0.2;
            transform: translatey(-20px);
            -webkit-transform: translatey(-20px);
            -moz-transform: translatey(-20px);
            -ms-transform: translatey(-20px);
            -o-transform: translatey(-20px);
}
    }

    @keyframes change-color2 {
        0% {
            background-color: #0723f2;
        }
        50% {
            background-color: yellow;
        }
        100% {
            background-color: black;
        }
    }
    @keyframes change-color {
        0% {
            background-color: #eee;
        }
        50% {
            background-color: red;
        }
        100% {
            background-color: #eee;
        }
    }
    @keyframes spin {
        0% {
            transform: rotate(0deg);
            -webkit-transform: rotate(0deg);
            -moz-transform: rotate(0deg);
            -ms-transform: rotate(0deg);
            -o-transform: rotate(0deg);
}
        100% {
            transform: rotate(360deg);
            -webkit-transform: rotate(360deg);
            -moz-transform: rotate(360deg);
            -ms-transform: rotate(360deg);
            -o-transform: rotate(360deg);
}
    }


    * {
        box-sizing: border-box;
        padding: 0;
        margin: 0;
}
    .animation-1 {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .animation:hover {
        animation-play-state: paused;
    }
    .animation {
        animation-name: spin, change-color2;
        animation-duration: 1s;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
        animation-play-state: ;
        width: 100px;
        height: 100px;
        background-color: #eee;
        border: 5px solid red;
        border-left-color: transparent;
        border-radius: 50%;
        -webkit-border-radius: 50%;
        -moz-border-radius: 50%;
        -ms-border-radius: 50%;
        -o-border-radius: 50%;
}
    .page:hover {
        animation-name: change-color;
        animation-duration: 3s;
    }
    .page {
        display: grid;
        height: 100vh;
        background-color: #EEE;
        grid-template-columns: repeat(10, 1fr);
        grid-template-rows: 60px 1fr 100px;
        grid-template-areas: "logo logo nav nav nav nav nav nav nav nav"
        "content content content content content content content . sidebar sidebar"
        "footer footer footer footer footer footer footer footer footer footer";
    }
    .h2-grid {
        text-align: center;
        font-size: 1.9em;
        background-color: red;
        color: white;
        grid-area: logo;
    }
    .ul-grid {
        list-style-type: none;
        display: flex;
        justify-content: space-around;
        margin-top: 15px;
        flex-wrap: wrap;
    }
    .nav-grid {
        background-color: #0723f2;
        color: aqua;
        grid-area: nav;
    }
    .sec-grid {
        background-color: aqua;
        grid-area: content;
    }
    .rotate {
        width: 290px;
        height: 174px;
        margin: 20px 0px 20px 50px;
    }
    .rotate:hover img {
        transition: 0.9s;
        -webkit-transition: 0.9s;
        -moz-transition: 0.9s;
        -ms-transition: 0.9s;
        -o-transition: 0.9s;
        transform: scale(1.2) rotate(5deg);
        -webkit-transform: scale(1.2) rotate(5deg);
        -moz-transform: scale(1.2) rotate(5deg);
        -ms-transform: scale(1.2) rotate(5deg);
        -o-transform: scale(1.2) rotate(5deg);
}
    .sid-grid {
        background-color: blueviolet;
        grid-area: sidebar;
    }
    .foot-grid {
        grid-area: footer;
        background-color: brown;
    }
    .container-flip {
        margin: 40px auto;
        width: 200px;
        perspective: 800px; /* علشان الحركة تبقى لينة */
    }
    .box-flip {
        position: relative;
        width: 200px;
        height: 200px;
        transform-style: preserve-3d;
        transition: 1.4s;
        -webkit-transition: 1.4s;
        -moz-transition: 1.4s;
        -ms-transition: 1.4s;
        -o-transition: 1.4s;
}
    .box-flip:hover {
        transform: rotateY(-180deg);
        -webkit-transform: rotateY(-180deg);
        -moz-transform: rotateY(-180deg);
        -ms-transform: rotateY(-180deg);
        -o-transform: rotateY(-180deg);
}

    .box-flip .face {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        font-size: 30px;
        color: white;
        backface-visibility: hidden;
        -webkit-backface-visibility: hidden;
}
    .box-flip .front {
        background-color: red;
    }
    .box-flip .back {
        background-color: green;
        transform: rotateY(180deg);
        -webkit-transform: rotateY(180deg);
        -moz-transform: rotateY(180deg);
        -ms-transform: rotateY(180deg);
        -o-transform: rotateY(180deg);
}







    .test {
        padding: 20px;
        margin: 20px;
    }
    .grid-1 {
        background-color: rgb(219, 23, 23);
    }
    
    .grid {
        margin-top: 100%;
        display: grid;
        width: 100%;
        height: 300px;
        background-color: #EEE;
        grid-template: repeat(3, 1fr)/ repeat(6, 1fr);
        gap: 10px 10px;
    }
    .editable {
    caret-color: red;
}
.gradient {
    background-image: linear-gradient(90deg,
    red 20%,
    green 20%,
    green 40%,
    blue 40%,
    blue 60%,
    black 60%,
    black 80%,
    yellow 80%
    );
    width: 800px;
    height: 150px;
    margin: 10px;
}

:root {
    --mainColor: blue;
}

.mmm {
    background-color: var(--mainColor, black);
}

.parent {
    display: flex;
    margin: 10px;
    padding: 10px;
    counter-increment: members-counter;
}

.user {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: 30px;
    background-color: rgba(92, 83, 83, 0.26);
    width: 100px;
    font: bold 35px arial;
}

.one-parent {
    background-color: rgba(92, 83, 83, 0.26);
    width: 100%;
    padding: 10px;
    position: relative;
}

/* .one-parent::before {
    content: attr(data-text);
} */
.one-parent::before {
    content: "";
    width: 0;
    height: 0;
    background-color: transparent;
    position: absolute;
    top: 50%;
    margin-top: -20px;
    left: -40px;
    border-width: 20px;
    border-style: solid;
    border-color: transparent cyan transparent transparent;
}

.one-parent::after {
    content: counter(members-counter);
    position: absolute;
    width: 10px;
    background-color: aqua;
    height: 100%;
    top: 0;
    right: -13px;
}

::selection {
    background-color: black;
    color: white;
}

.first-line::first-line {
    color: aqua;
}

.first-line::first-letter {
    background-color: red;
    color: #EEE;
    font-weight: bold;
    font-size: 30px;
}

.in:focus {
    border-radius: 10px;
    border-color: #0723f2;
    outline: double;
}

/* div:empty{
    border: 10px solid red;
    padding: 10px;
    margin: 20px;
    width: 150px;
    height: 100px;
} */
input.ch:checked+label {
    color: red;
}

button.button:hover {
    background-color: aqua;
}

a.google:visited {
    color: green;
}

table td:hover {
    background-color: aqua;
}

a.google {
    text-decoration: none;
    color: red;
}

a.google:hover {
    color: blue;
}

table {
    width: 98%;
    margin: 20px;
    border-spacing: 0px;
    text-align: center;
}

table td {
    padding: 10px;
    background-color: #EEE;
    font-size: 20px;
    border: 2px solid black;
}

table thead td {
    background-color: rgba(0, 0, 0, 0.507);
    font: 50px bold Arial, Helvetica, sans-serif;
    color: white;
    font-weight: bold;
    border-color: rgba(0, 0, 0, 0.267);
}

.absolute {
    position: relative;
    width: auto;
    height: 60px;
}

._one,
._two,
._three {
    padding: 10px;
    width: 100px;
    color: #fff;
    text-align: center;
    position: absolute;
}

._one {
    background-color: red;
    z-index: 3;
    left: 10px;
    top: 10px;
}

._two {
    z-index: 2;
    left: 5px;
    top: 5px;
    background-color: green;
}

._three {
    background-color: blue;
}

.sticky {
    width: 20%;
    margin-left: 5px;
    background-color: blueviolet;
    position: sticky;
    top: 5px;
}

.click {
    position: fixed;
    bottom: 0;
    right: 0;
    cursor: auto;
}

body {
    font-family: 'Cairo', sans-serif;
}

.inherit {
    position: relative;
    height: 300px;
    text-align: center;
    padding: 20px;
    border: 5px solid red;
}

.inherit h1 {
    position: absolute;
    bottom: 0;
    border: inherit;
    padding: inherit;
    font-size: 5vw;
}

.h2 {
    text-align: center;
    direction: ltr;
}

.img1 {
    vertical-align: top;
}

.h2-1 {
    text-align: center;
    direction: rtl;
}

.img2 {
    vertical-align: middle;
}

.one1 {
    font: 16pt bold;
    text-align: center;
    width: auto;
    height: 50px;
    color: white;
    background-color: aqua;
    background-image: url("images1.jpg");
    background-repeat: no-repeat;
    background-attachment: scroll;
    /* scroll (Default)*/
    background-position: 20% 50%;
    background-size: 100% 100%;
}

.one {
    border-bottom: 2px solid red;
    color: red;
}

.two {
    border-bottom: 2px solid green;
    color: green;
}

.three {
    border-bottom: 2px solid blue;
    color: blue;
}

.four {
    border-bottom: 2px solid black;
    color: black;
}

.one,
.two,
.three,
.four {
    padding: 10px;
    margin: 15px 0;
    background-color: #EEE;
    text-shadow: 2px 2px 2px;

}

.lorem {
    width: 150px;
    height: 150px;
    background-color: #EEE;
    margin: 20px auto;
    border-radius: 6px;
    overflow: auto;
    padding: 10px;
}